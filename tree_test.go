package merkle

import (
	"bytes"
	"crypto/sha256"
	"testing"
)

var testConfig = &Config{
	hasher:       sha256.New(),
	depth:        2,
	hashSize:     32,
	allLeavesNum: 4,
	allNodesNum:  7,
}

func TestNewTree(t *testing.T) {
	type input struct {
		config *Config
		leaves [][]byte
		hashed bool
	}
	type output struct {
		root *Node
		err  error
	}
	testCases := []struct {
		name string
		in   input
		out  output
	}{
		{
			"success: unhashed leaves",
			input{
				testConfig,
				[][]byte{
					[]byte{0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
					[]byte{0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
					[]byte{0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03},
				},
				false,
			},
			output{
				&Node{
					b: []byte{
						0x8b, 0xb6, 0x00, 0x88, 0x19, 0x1f, 0xf9, 0x8e,
						0xeb, 0x1d, 0x30, 0x50, 0xdd, 0x58, 0xee, 0xba,
						0x0e, 0x06, 0x44, 0x17, 0xbf, 0x1d, 0x4d, 0xd9,
						0xf6, 0xb8, 0x37, 0x11, 0x2b, 0x8a, 0xac, 0xe3,
					},
					left: &Node{
						b: []byte{
							0x1e, 0x2a, 0xbc, 0x6e, 0x47, 0x7b, 0x5a, 0xc3,
							0xb1, 0x5d, 0x7f, 0x15, 0x39, 0x89, 0xf4, 0x9d,
							0xb2, 0x19, 0xc0, 0x24, 0x4a, 0xc9, 0x4b, 0x9a,
							0x1b, 0x77, 0x8c, 0x9d, 0xbd, 0xd5, 0xb7, 0xe4,
						},
					},
					right: &Node{
						b: []byte{
							0xbf, 0x60, 0xc7, 0xd6, 0x82, 0x71, 0x68, 0x6d,
							0xce, 0x02, 0x68, 0x7a, 0x48, 0x6e, 0xe4, 0xe3,
							0x39, 0xb4, 0x2a, 0x6f, 0xef, 0x93, 0x9c, 0x07,
							0x1f, 0x45, 0x78, 0x54, 0x72, 0x34, 0xdc, 0x08,
						},
					},
				},
				nil,
			},
		},
		{
			"success: hashed leaves",
			input{
				testConfig,
				[][]byte{
					[]byte{
						0x04, 0xab, 0xc8, 0x82, 0x1a, 0x06, 0xe5, 0xa3,
						0x09, 0x37, 0x96, 0x7d, 0x11, 0xad, 0x10, 0x22,
						0x1c, 0xb5, 0xac, 0x3b, 0x52, 0x73, 0xe4, 0x34,
						0xf1, 0x28, 0x4e, 0xe8, 0x71, 0x29, 0xa0, 0x61,
					},
					[]byte{
						0x10, 0xae, 0x0f, 0xdb, 0xf8, 0xc4, 0xf1, 0xf2,
						0xb5, 0xe7, 0x08, 0xfd, 0x74, 0x78, 0xab, 0xd2,
						0xbf, 0x03, 0xb1, 0x90, 0xed, 0xc8, 0x78, 0xdc,
						0x62, 0xad, 0xa6, 0x45, 0xaa, 0x7e, 0x03, 0x10,
					},
					[]byte{
						0xd1, 0x55, 0xd4, 0xb4, 0xa5, 0xd8, 0x2a, 0xbd,
						0xc4, 0x2c, 0xe8, 0xdc, 0xc3, 0x1a, 0x73, 0x39,
						0xa0, 0x03, 0xb8, 0x72, 0xec, 0x03, 0x32, 0xc8,
						0x56, 0xf6, 0x9d, 0x6c, 0xcc, 0x59, 0xc9, 0x67,
					},
				},
				true,
			},
			output{
				&Node{
					b: []byte{
						0x8b, 0xb6, 0x00, 0x88, 0x19, 0x1f, 0xf9, 0x8e,
						0xeb, 0x1d, 0x30, 0x50, 0xdd, 0x58, 0xee, 0xba,
						0x0e, 0x06, 0x44, 0x17, 0xbf, 0x1d, 0x4d, 0xd9,
						0xf6, 0xb8, 0x37, 0x11, 0x2b, 0x8a, 0xac, 0xe3,
					},
					left: &Node{
						b: []byte{
							0x1e, 0x2a, 0xbc, 0x6e, 0x47, 0x7b, 0x5a, 0xc3,
							0xb1, 0x5d, 0x7f, 0x15, 0x39, 0x89, 0xf4, 0x9d,
							0xb2, 0x19, 0xc0, 0x24, 0x4a, 0xc9, 0x4b, 0x9a,
							0x1b, 0x77, 0x8c, 0x9d, 0xbd, 0xd5, 0xb7, 0xe4,
						},
					},
					right: &Node{
						b: []byte{
							0xbf, 0x60, 0xc7, 0xd6, 0x82, 0x71, 0x68, 0x6d,
							0xce, 0x02, 0x68, 0x7a, 0x48, 0x6e, 0xe4, 0xe3,
							0x39, 0xb4, 0x2a, 0x6f, 0xef, 0x93, 0x9c, 0x07,
							0x1f, 0x45, 0x78, 0x54, 0x72, 0x34, 0xdc, 0x08,
						},
					},
				},
				nil,
			},
		},
		{
			"failure: too many leaves",
			input{
				testConfig,
				[][]byte{nil, nil, nil, nil, nil},
				false,
			},
			output{
				nil,
				ErrTooManyLeaves,
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			in, out := tc.in, tc.out

			tree, err := NewTree(in.config, in.leaves, in.hashed)
			if err != out.err {
				t.Errorf("expected: %v, actual: %v", out.err, err)
			}

			if err == nil {
				rootActual := tree.Root()
				rootExpected := out.root

				testNodesEquality(t, rootExpected, rootActual)
				testNodesEquality(t, rootExpected.Left(), rootActual.Left())
				testNodesEquality(t, rootExpected.Right(), rootActual.Right())
			}
		})
	}
}

func TestMembershipProof(t *testing.T) {
	tree, err := NewTree(
		testConfig,
		[][]byte{
			[]byte{0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
			[]byte{0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
			[]byte{0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03},
		},
		false,
	)
	if err != nil {
		t.Fatal(err)
	}

	type input struct {
		index int
	}
	type output struct {
		proof []byte
		err   error
	}
	testCases := []struct {
		name string
		in   input
		out  output
	}{
		{
			"success",
			input{
				0,
			},
			output{
				[]byte{
					0x10, 0xae, 0x0f, 0xdb, 0xf8, 0xc4, 0xf1, 0xf2,
					0xb5, 0xe7, 0x08, 0xfd, 0x74, 0x78, 0xab, 0xd2,
					0xbf, 0x03, 0xb1, 0x90, 0xed, 0xc8, 0x78, 0xdc,
					0x62, 0xad, 0xa6, 0x45, 0xaa, 0x7e, 0x03, 0x10,
					0xbf, 0x60, 0xc7, 0xd6, 0x82, 0x71, 0x68, 0x6d,
					0xce, 0x02, 0x68, 0x7a, 0x48, 0x6e, 0xe4, 0xe3,
					0x39, 0xb4, 0x2a, 0x6f, 0xef, 0x93, 0x9c, 0x07,
					0x1f, 0x45, 0x78, 0x54, 0x72, 0x34, 0xdc, 0x08,
				},
				nil,
			},
		},
		{
			"failure: leaf index out of range",
			input{
				4,
			},
			output{
				nil,
				ErrLeafIndexOutOfRange,
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			in, out := tc.in, tc.out

			proof, err := tree.CreateMembershipProof(in.index)
			if err != out.err {
				t.Errorf("expected: %v, actual: %v", out.err, err)
			}
			if !bytes.Equal(proof, out.proof) {
				t.Errorf("expected: %x, actual: %x", out.proof, proof)
			}

			if len(proof) > 0 {
				for j := 0; j <= tree.config.allLeavesNum; j++ {
					ok, err := tree.VerifyMembershipProof(j, proof)
					if err != nil {
						if j < tree.config.allLeavesNum {
							t.Fatal(err)
						} else if err != ErrLeafIndexOutOfRange {
							t.Fatal(err)
						}
					}
					if j == in.index && !ok {
						t.Errorf("expected: %t, actual: %t", true, ok)
					} else if j != in.index && ok {
						t.Errorf("expected: %t, actual: %t", false, ok)
					}
				}
			}
		})
	}
}
